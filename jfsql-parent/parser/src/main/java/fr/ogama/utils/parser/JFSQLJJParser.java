/* JFSQLJJParser.java */
/* Generated By:JavaCC: Do not edit this line. JFSQLJJParser.java */
package fr.ogama.utils.parser;
import fr.ogama.utils.parser.model.*;
import java.util.Vector;
import fr.ogama.utils.parser.model.get.*;
import java.io.DataInputStream;
import java.io.FileInputStream;

public class JFSQLJJParser implements JFSQLJJParserConstants {
  public static void main(String args []) throws Exception
  {
    JFSQLJJParser jfsqlParser = null;
    if (args.length == 1)
    {
      jfsqlParser = new JFSQLJJParser(new DataInputStream(new FileInputStream(args [0])));
      Vector v = jfsqlParser.JFSQLStatements();
      for (int i = 0; i < v.size(); i++)
      {
        Statement st = (Statement) v.elementAt(i);
        System.out.println(st.toString());
      }
    }
    else
    {
      throw new Exception("No argument has been specified");
    }
  }

  final public Vector JFSQLStatements() throws ParseException {Vector v = new Vector();
  Statement s;
    label_1:
    while (true) {
      s = JFSQLStatement();
if (s == null) {if ("" != null) return v;}
      else v.addElement(s);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_GET:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
{if ("" != null) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Statement JFSQLStatement() throws ParseException {Statement s = null;
    s = getQuery();
    jj_consume_token(44);
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
  }

  final public GetStatement getQuery() throws ParseException {GetStatement getStatement = new GetStatement();
  GetClause getClause = new GetClause();
  InClause inClause = new InClause();
  HavingClause havingClause = null;
  SortByClause sortByClause = null;
    getClause = getClause();
    inClause = inClause();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_:{
      havingClause = havingClause();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_SORT:{
      sortByClause = sortByClause();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
getStatement.setGetClause(getClause);
    getStatement.setInClause(inClause);
    getStatement.setHavingClause(havingClause);
    getStatement.setSortByClause(sortByClause);
    {if ("" != null) return getStatement;}
    throw new Error("Missing return statement in function");
  }

  final public GetClause getClause() throws ParseException {GetClause getClause = new GetClause();
  Token property = null;
  Token limit = null;
  boolean distinct = false;
    jj_consume_token(K_GET);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_NUMBER:{
      limit = jj_consume_token(S_NUMBER);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_DISTINCT:{
      jj_consume_token(K_DISTINCT);
distinct = true;
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    property = jj_consume_token(S_IDENTIFIER);
getClause.setLimit(limit != null ? limit.toString() : null);
    getClause.setDistinct(distinct);
    getClause.setProperty(property != null ? property.toString() : null);
    {if ("" != null) return getClause;}
    throw new Error("Missing return statement in function");
  }

  final public InClause inClause() throws ParseException {InClause inClause = new InClause();
  Vector pathItems = new Vector();
  PathItem pathItem;
    jj_consume_token(K_IN);
    jj_consume_token(45);
    pathItem = pathItem();
pathItems.addElement(pathItem);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 46:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(46);
      pathItem = pathItem();
pathItems.addElement(pathItem);
    }
    jj_consume_token(47);
inClause.setPathItems(pathItems);
    {if ("" != null) return inClause;}
    throw new Error("Missing return statement in function");
  }

  final public HavingClause havingClause() throws ParseException {HavingClause havingClause = null;
  Expression expression;
    jj_consume_token(K_);
    expression = expression();
if (expression != null)
    {
      havingClause = new HavingClause();
      havingClause.setExpression(expression);
    }
    {if ("" != null) return havingClause;}
    throw new Error("Missing return statement in function");
  }

  final public SortByClause sortByClause() throws ParseException {SortByClause sortByClause = new SortByClause();
  Token property;
  boolean isAscending = true; // default value

    jj_consume_token(K_SORT);
    jj_consume_token(K_BY);
    property = jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_ASCENDING:
    case K_DESCENDING:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ASCENDING:{
        jj_consume_token(K_ASCENDING);
        break;
        }
      case K_DESCENDING:{
        jj_consume_token(K_DESCENDING);
isAscending = false;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
sortByClause.setProperty(property != null ? property.toString() : null);
    sortByClause.setAscendingOrder(isAscending);
    {if ("" != null) return sortByClause;}
    throw new Error("Missing return statement in function");
  }

  final public PathItem pathItem() throws ParseException {PathItem pathItem = new PathItem();
  Token path;
  Token deep = null;
    path = jj_consume_token(S_CHAR_LITERAL);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_DEEP:{
      jj_consume_token(K_DEEP);
      deep = jj_consume_token(S_NUMBER);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
pathItem.setPath(path.toString().substring(1, path.toString().length() - 1));
    pathItem.setDeep(deep != null ? deep.toString() : null);
    {if ("" != null) return pathItem;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expression() throws ParseException {Expression e1, e2;
  ExpressionImpl e = null;
  boolean single = true;
    e1 = andExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_OR:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(K_OR);
      e2 = andExpression();
if (single)
      {
        e = new ExpressionImpl("OR", e1);
      }
      single = false;
      e.addOperand(e2);
    }
{if ("" != null) return (single ? e1 : e);}
    throw new Error("Missing return statement in function");
  }

  final public Expression andExpression() throws ParseException {Expression e1, e2;
  ExpressionImpl e = null;
  boolean single = true;
    e1 = unaryLogicalExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_AND:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(K_AND);
      e2 = unaryLogicalExpression();
if (single)
      {
        e = new ExpressionImpl("AND", e1);
      }
      single = false;
      e.addOperand(e2);
    }
{if ("" != null) return (single ? e1 : e);}
    throw new Error("Missing return statement in function");
  }

  final public Expression unaryLogicalExpression() throws ParseException {Expression e1, e;
  boolean not = false;
    if (jj_2_1(2)) {
      e = existsClause();
{if ("" != null) return e;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:
      case K_AVG:
      case K_MIN:
      case K_MAX:
      case K_SUM:
      case K_COUNT:
      case K_PRIOR:
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 45:
      case 49:
      case 50:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_NOT:{
          jj_consume_token(K_NOT);
not = true;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        e1 = relationalExpression();
if (not) e = new ExpressionImpl("NOT", e1);
      else e = e1;
      {if ("" != null) return e;}
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionImpl existsClause() throws ParseException {ExpressionImpl e;
  GetStatement q;
  boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
not = true;
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(K_EXISTS);
    jj_consume_token(45);
    q = subQuery();
    jj_consume_token(47);
ExpressionImpl e1 = new ExpressionImpl("EXISTS", q);
    if (not) e = new ExpressionImpl("NOT", e1);
    else e = e1;
    {if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression relationalExpression() throws ParseException {Expression e1, eleft;
  ExpressionImpl eright = null;
  Vector v;
  boolean prior = false;
    if (jj_2_2(2147483647)) {
      jj_consume_token(45);
      v = expressionList();
      jj_consume_token(47);
eleft = new ExpressionImpl(",");
      ((ExpressionImpl) eleft).setOperands(v);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_AVG:
      case K_MIN:
      case K_MAX:
      case K_SUM:
      case K_COUNT:
      case K_PRIOR:
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 45:
      case 49:
      case 50:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_PRIOR:{
          jj_consume_token(K_PRIOR);
prior = true;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        e1 = simpleExpression();
if (prior) eleft = new ExpressionImpl("PRIOR", e1);
        else eleft = e1;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_IN:
    case K_NOT:
    case K_LIKE:
    case K_BETWEEN:
    case K_MATCH:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:{
        eright = relationalOperatorExpression();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_3(2)) {
          eright = inClauseExpression();
        } else if (jj_2_4(2)) {
          eright = betweenClauseExpression();
        } else if (jj_2_5(2)) {
          eright = likeClauseExpression();
        } else if (jj_2_6(2)) {
          eright = matchClauseExpression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
if (eright == null) {if ("" != null) return eleft;}
    Vector v2 = eright.getOperands();
    if (v2 == null) v2 = new Vector(); //For IS NULL, which is unary!
    v2.insertElementAt(eleft, 0);
    eright.setOperands(v2);
    {if ("" != null) return eright;}
    throw new Error("Missing return statement in function");
  }

  final public Vector expressionList() throws ParseException {Vector v = new Vector(8);
  Expression e;
    e = simpleExpressionOrPreparedCol();
v.addElement(e);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 46:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
      jj_consume_token(46);
      e = simpleExpressionOrPreparedCol();
v.addElement(e);
    }
{if ("" != null) return v;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionImpl relationalOperatorExpression() throws ParseException {ExpressionImpl e;
  Expression e1, eright;
  String op;
  String unaryOp = null;
    op = Relop();
e = new ExpressionImpl(op);
    if (jj_2_7(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ANY:
      case K_ALL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ALL:{
          jj_consume_token(K_ALL);
unaryOp = "ALL";
          break;
          }
        case K_ANY:{
          jj_consume_token(K_ANY);
unaryOp = "ANY";
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(45);
      e1 = subQuery();
      jj_consume_token(47);
if (unaryOp == null) eright = e1;
        else eright = new ExpressionImpl(unaryOp, e1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_GET:
      case K_AVG:
      case K_MIN:
      case K_MAX:
      case K_SUM:
      case K_COUNT:
      case K_PRIOR:
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 45:
      case 48:
      case 49:
      case 50:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_PRIOR:{
          jj_consume_token(K_PRIOR);
unaryOp = "PRIOR";
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        e1 = simpleExpressionOrPreparedCol();
if (unaryOp == null) eright = e1;
      else eright = new ExpressionImpl(unaryOp, e1);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
e.addOperand(eright);
    {if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression simpleExpressionOrPreparedCol() throws ParseException {Expression e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_AVG:
    case K_MIN:
    case K_MAX:
    case K_SUM:
    case K_COUNT:
    case K_NULL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 45:
    case 49:
    case 50:{
      e = simpleExpression();
{if ("" != null) return e;}
      break;
      }
    case 48:{
      e = preparedCol();
{if ("" != null) return e;}
      break;
      }
    case K_GET:{
      e = subQuery();
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// For prepared columns ("?")
  final public Expression preparedCol() throws ParseException {
    jj_consume_token(48);
{if ("" != null) return new ExpressionImpl("?");}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionImpl inClauseExpression() throws ParseException {ExpressionImpl e;
  GetStatement q = null;
  boolean not = false;
  Vector v = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
not = true;
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
e = new ExpressionImpl(not ? "NOT IN" : "IN");
    jj_consume_token(45);
    if (jj_2_8(2)) {
      v = expressionList();
e.setOperands(v);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_GET:{
        q = subQuery();
e.addOperand(q);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(47);
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionImpl betweenClauseExpression() throws ParseException {ExpressionImpl e;
  Expression e1, e2;
  boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
not = true;
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    e1 = simpleExpressionOrPreparedCol();
    jj_consume_token(K_AND);
    e2 = simpleExpressionOrPreparedCol();
if (not) e = new ExpressionImpl("NOT BETWEEN", e1, e2);
    else e = new ExpressionImpl("BETWEEN", e1, e2);
    {if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionImpl likeClauseExpression() throws ParseException {Expression eright;
  ExpressionImpl e;
  boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
not = true;
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    eright = simpleExpressionOrPreparedCol();
if (not) e = new ExpressionImpl("NOT LIKE", eright);
    else e = new ExpressionImpl("LIKE", eright);
    {if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionImpl matchClauseExpression() throws ParseException {Expression eright;
  ExpressionImpl e;
  boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
not = true;
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(K_MATCH);
    eright = simpleExpressionOrPreparedCol();
if (not) e = new ExpressionImpl("NOT MATCH", eright);
    else e = new ExpressionImpl("MATCH", eright);
    {if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression simpleExpression() throws ParseException {Token op;
  Expression e1, e2;
  ExpressionImpl e = null;
    e1 = multiplicativeExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:
      case 50:
      case 51:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        op = jj_consume_token(49);
        break;
        }
      case 50:{
        op = jj_consume_token(50);
        break;
        }
      case 51:{
        op = jj_consume_token(51);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = multiplicativeExpression();
e = new ExpressionImpl(op.toString(), e1);
      e.addOperand(e2);
      e1 = e;
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression multiplicativeExpression() throws ParseException {Token op;
  Expression e1, e2;
  ExpressionImpl e = null;
    e1 = expotentExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 52:
      case 53:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 52:{
        op = jj_consume_token(52);
        break;
        }
      case 53:{
        op = jj_consume_token(53);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = expotentExpression();
e = new ExpressionImpl(op.toString(), e1);
      e.addOperand(e2);
      e1 = e;
    }
{if ("" != null) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expotentExpression() throws ParseException {Token op;
  Expression e1, e2;
  ExpressionImpl e = null;
  boolean single = true;
    e1 = unaryExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_8;
      }
      op = jj_consume_token(54);
      e2 = unaryExpression();
if (single) e = new ExpressionImpl(op.toString(), e1);
      single = false;
      e.addOperand(e2);
    }
{if ("" != null) return (single ? e1 : e);}
    throw new Error("Missing return statement in function");
  }

  final public Expression unaryExpression() throws ParseException {Token op = null;
  Expression e1, e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 49:
    case 50:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        op = jj_consume_token(49);
        break;
        }
      case 50:{
        op = jj_consume_token(50);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    e1 = primaryExpression();
if (op == null) e = e1;
    else e = new ExpressionImpl(op.toString(), e1);
    {if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

// 01/07/00 PY.Gibello - Added COUNT(*) to SQLPrimaryExpression
// TBD should be ZConstant("COUNT(*)", ZConstant.STRING))
// instead of ZConstant("*", ZConstant.COLUMNNAME) ??
// 01/06/02 PY.Gibello - Added ALL | DISTINCT (then the column name
// starts with "all " or "distinct " when required, which may not be the
// fairest solution...)
// SQLPrimaryExpression ::= NULL | OuterJoinExpression
// | AggregateFunc ( [ ALL | DISTINCT ] TableColumn ) | TableColumn
// | COUNT(*)
// | <NUMBER> | <STRING> | <BIND>
  final public Expression primaryExpression() throws ParseException {Token t;
  String s, s2, modifier = "";
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_NULL:{
      jj_consume_token(K_NULL);
{if ("" != null) return new Constant("NULL", Constant.NULL);}
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      if (jj_2_9(2147483647)) {
        s = outerJoinExpression();
{if ("" != null) return new Constant(s, Constant.COLUMNNAME);}
    //return new ExpressionImpl("_NOT_SUPPORTED"); //TBD

      } else if (jj_2_10(3)) {
        jj_consume_token(K_COUNT);
        jj_consume_token(45);
        jj_consume_token(52);
        jj_consume_token(47);
{if ("" != null) return new ExpressionImpl("COUNT", new Constant("*", Constant.COLUMNNAME));}
      } else if (jj_2_11(3)) {
        s = aggregateFunc();
        jj_consume_token(45);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ALL:{
          jj_consume_token(K_ALL);
modifier = "all ";
          break;
          }
        case K_DISTINCT:{
          jj_consume_token(K_DISTINCT);
modifier = "distinct ";
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        s2 = tableColumn();
        jj_consume_token(47);
{if ("" != null) return new ExpressionImpl(s, new Constant(modifier + s2, Constant.COLUMNNAME));}
      } else if (jj_2_12(2)) {
        e = functionCall();
{if ("" != null) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:{
          s = tableColumn();
{if ("" != null) return new Constant(s, Constant.COLUMNNAME);}
          break;
          }
        case S_NUMBER:{
          t = jj_consume_token(S_NUMBER);
{if ("" != null) return new Constant(t.toString(), Constant.NUMBER);}
          break;
          }
        case S_CHAR_LITERAL:{
          t = jj_consume_token(S_CHAR_LITERAL);
s = t.toString();
    if (s.startsWith("\'")) s = s.substring(1);
    if (s.endsWith("\'")) s = s.substring(0, s.length() - 1);
    {if ("" != null) return new Constant(s, Constant.STRING);}
          break;
          }
        case S_BIND:{
          t = jj_consume_token(S_BIND);
{if ("" != null) return new Constant(t.toString(), Constant.STRING);}
          break;
          }
        case 45:{
          jj_consume_token(45);
          e = expression();
          jj_consume_token(47);
{if ("" != null) return e;}
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// AggregateFunc ::= SUM | AVG | MAX | MIN | COUNT
// 01/07/00 PY.Gibello - Added COUNT
  final public String aggregateFunc() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_SUM:{
      t = jj_consume_token(K_SUM);
{if ("" != null) return t.toString();}
      break;
      }
    case K_AVG:{
      t = jj_consume_token(K_AVG);
{if ("" != null) return t.toString();}
      break;
      }
    case K_MAX:{
      t = jj_consume_token(K_MAX);
{if ("" != null) return t.toString();}
      break;
      }
    case K_MIN:{
      t = jj_consume_token(K_MIN);
{if ("" != null) return t.toString();}
      break;
      }
    case K_COUNT:{
      t = jj_consume_token(K_COUNT);
{if ("" != null) return t.toString();}
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionImpl functionCall() throws ParseException {Token t;
  String s;
  ExpressionImpl e;
  Vector parm = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_IDENTIFIER:{
      t = jj_consume_token(S_IDENTIFIER);
s = t.toString();
      break;
      }
    case K_AVG:
    case K_MIN:
    case K_MAX:
    case K_SUM:
    case K_COUNT:{
      s = aggregateFunc();
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(45);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_GET:
    case K_AVG:
    case K_MIN:
    case K_MAX:
    case K_SUM:
    case K_COUNT:
    case K_NULL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 45:
    case 48:
    case 49:
    case 50:{
      parm = expressionList();
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(47);
int nparm = Utils.isCustomFunction(s);
    if (nparm < 0) nparm = (Utils.isAggregate(s) ? 1 : - 1);
    if (nparm < 0) {if (true) throw new ParseException("Undefined function: " + s);}
    if (nparm != Utils.VARIABLE_PLIST && nparm > 0)
    {
      if (parm == null || parm.size() != nparm) {if (true) throw new ParseException("Function " + s + " should have " + nparm + " parameter(s)");}
    }
    e = new ExpressionImpl(s);
    e.setOperands(parm);
    {if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public String outerJoinExpression() throws ParseException {String s = null;
  String c = "";
    // user.table.col
      s = oracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 55:{
      jj_consume_token(55);
      c = oracleObjectName();
s += "." + c;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:{
        jj_consume_token(55);
        c = oracleObjectName();
s += "." + c;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(45);
    jj_consume_token(49);
    jj_consume_token(47);
{if ("" != null) return s + "(+)";}
    throw new Error("Missing return statement in function");
  }

  final public GetStatement subQuery() throws ParseException {GetStatement q;
    q = getQuery();
{if ("" != null) return q;}
    throw new Error("Missing return statement in function");
  }

  final public String Relop() throws ParseException {Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 56:{
      op = jj_consume_token(56);
{if ("" != null) return op.toString();}
      break;
      }
    case 57:{
      op = jj_consume_token(57);
{if ("" != null) return op.toString();}
      break;
      }
    case 58:{
      op = jj_consume_token(58);
{if ("" != null) return op.toString();}
      break;
      }
    case 59:{
      op = jj_consume_token(59);
{if ("" != null) return op.toString();}
      break;
      }
    case 60:{
      op = jj_consume_token(60);
{if ("" != null) return op.toString();}
      break;
      }
    case 61:{
      op = jj_consume_token(61);
{if ("" != null) return op.toString();}
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String tableColumn() throws ParseException {StringBuffer buf = new StringBuffer();
  String s;
    // user.table.column
      s = oracleObjectName();
buf.append(s);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 55:{
      jj_consume_token(55);
      s = oracleObjectName();
buf.append("." + s);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:{
        jj_consume_token(55);
        s = oracleObjectName();
buf.append("." + s);
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      ;
    }
{if ("" != null) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String oracleObjectName() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case S_IDENTIFIER:{
      t = jj_consume_token(S_IDENTIFIER);
{if ("" != null) return t.toString();}
      break;
      }
    case S_QUOTED_IDENTIFIER:{
      t = jj_consume_token(S_QUOTED_IDENTIFIER);
{if ("" != null) return t.toString();}
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(45)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(45)) return true;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(59)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_62()) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  private boolean jj_3R_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(54)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(55)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(55)) return true;
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(K_PRIOR)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(K_ANY)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(K_DEEP)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(45)) return true;
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    if (jj_3R_51()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    if (jj_scan_token(45)) return true;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    }
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(K_COUNT)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(46)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(K_MIN)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(K_MAX)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(K_DESCENDING)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(K_AVG)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(K_SORT)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(K_SUM)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    if (jj_scan_token(K_MATCH)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(45)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(S_BIND)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(K_)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_scan_token(46)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(K_PRIOR)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(45)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(45)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(45)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(55)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_18()) return true;
    if (jj_scan_token(45)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    if (jj_3R_63()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(55)) return true;
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(K_COUNT)) return true;
    if (jj_scan_token(45)) return true;
    if (jj_scan_token(52)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(K_GET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JFSQLJJParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[48];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x200,0x400,0x0,0x40,0x0,0xc0000000,0xc0000000,0x100,0x1000,0x2000,0x4000,0x5f84000,0x4000,0x1000000,0x5f80000,0x0,0x3c080,0x0,0xa000000,0xa000000,0x1000000,0x5f80020,0x4f80020,0x4000,0x20,0x4000,0x4000,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000040,0x4000000,0x0,0xf80000,0xf80000,0x4f80020,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x1,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x62e41,0x0,0x0,0x62e41,0x3f000000,0x3f000000,0x4000,0x0,0x0,0x0,0x72e41,0x72e41,0x0,0x0,0x0,0x0,0x0,0xe0000,0xe0000,0x300000,0x300000,0x400000,0x60000,0x60000,0x0,0x0,0x2e41,0x0,0x40,0x72e41,0x800000,0x800000,0x3f000000,0x800000,0x800000,0x840,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JFSQLJJParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JFSQLJJParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JFSQLJJParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JFSQLJJParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JFSQLJJParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JFSQLJJParser(JFSQLJJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JFSQLJJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 48; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 48; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
              case 10: jj_3_11(); break;
              case 11: jj_3_12(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
